syntax = "proto3";

package raft_service;

// various 'command' messages to instruct the followers to do a thing the leader has done

// add client to self.clients
message AddClientCommand {
    int32 client_id = 1;
    string client_ip = 2;
}

// increment the expected sequence no in self.clients[client_id]
message IncrementClientSeqCommand {
    int32 client_id = 1;
}

message ChangeLockHolderCommand {
    int32 client_id = 1;
}

// add a file append operation to local queue of appends
message AddAppendCommand {
    string filename = 1;
    bytes content = 2;
}

// execute all appends in queue
message ExecuteAppendsCommand {}

message RemoveClientCommand{
    int32 client_id = 1;
}

message LogEntry {
    // only one command per log entry!
    oneof command {
        AddClientCommand add_client = 1;
        IncrementClientSeqCommand increment_client_seq = 2;
        ChangeLockHolderCommand change_lock_holder = 3;
        AddAppendCommand add_append = 4;
        ExecuteAppendsCommand execute_appends = 5;
        RemoveClientCommand remove_client = 6;
    }
    // check which one exists via (log entry).hasField("add_client"), for example
}

message AppendArgs{
    string leaderID = 1; // so follower can redirect clients
    LogEntry entry = 2; // log entries for followers to append
    // no entry == heartbeat
}

message RecoveryResponse {
    repeated LogEntry log = 1;
}

message Int {
    int32 value = 1;
}

message Bool {
    bool value = 1;
}

message String {
    string value = 1;
}

message Empty {}

service RaftService {
    rpc append_entry(AppendArgs) returns (Bool);
    rpc where_is_leader(Empty) returns (String);
    rpc recover_logs(Int) returns (RecoveryResponse);
}